//##############################################
//###         Engine & Clcok Setting         ###
//##############################################
//# /* General reset register  and  General clock register */
pci_write(0x0010, 0x4001); // BCLK, PLL1 output1 div 2
pci_write(0x0012, 0x0008);
pci_write(0x0014, 0xd800); // MCLK, PLL2 output2
pci_write(0x0016, 0x102a);
pci_write(0x0018, 0xc800); // NCLK, PLL1 output2
pci_write(0x001a, 0x0008);
pci_write(0x001c, 0xc001); // WCLK, PLL1 output1  div 2
pci_write(0x001e, 0x0aaa);
pci_write(0x0020, 0x0a2a);
pci_write(0x0022, 0x3c00);
pci_write(0x0030, 0x9000); // ICLK, PLL1 output2
pci_write(0x0032, 0x702b);
pci_write(0x0034, 0xb000); // XCLK, PLL2 output1
pci_write(0x0036, 0xf802);
pci_write(0x0038, 0x8800); // JCLK, PLL1 output1
pci_write(0x003a, 0xc000); // AMCLK, PLL3 output1
pci_write(0x003c, 0x8000); // ZCLK, PLL3 output1
pci_write(0x003e, 0x10aa);
pci_write(0x0040, 0x8003); // PCRCLK, PLL1 output1 div 4
pci_write(0x0042, 0x1002);
pci_write(0x0044, 0x66aa); // for nor booting should modify this register
pci_write(0x0046, 0x100a);
pci_write(0x0048, 0x1002);
pci_write(0x005c, 0xc403); // WSCLK, PLL1 output1 div 4
pci_write(0x0060, 0xb903); // REFCLK, PLL1 output2 div 4
pci_write(0x0062, 0x900d);
pci_write(0x0064, 0x8800); // CAPCLK, PLL1 output1

pci_write(0x0010, 0x0001);
pci_write(0x0012, 0x0008);
pci_write(0x0014, 0xD800);
pci_write(0x0016, 0x002a);
pci_write(0x0018, 0x8800);
pci_write(0x001a, 0x0008);
pci_write(0x001c, 0x8001);
pci_write(0x001e, 0x0aaa);
pci_write(0x0020, 0x002a);
pci_write(0x0022, 0x8000);
pci_write(0x0030, 0x9000);
pci_write(0x0032, 0x002b);
pci_write(0x0034, 0xb000);
pci_write(0x0036, 0x0802);
pci_write(0x0038, 0x0000);
pci_write(0x003a, 0xc000);
pci_write(0x003c, 0x8000);
pci_write(0x003e, 0x00aa);
pci_write(0x0040, 0x0000);
pci_write(0x0042, 0x0000);
pci_write(0x0044, 0x002a);
pci_write(0x0046, 0x000a);
pci_write(0x0048, 0x0000);
pci_write(0x005c, 0x0000);
pci_write(0x0060, 0x0000);
pci_write(0x0062, 0x0001);
pci_write(0x0064, 0x0800);

# Sdclk div = WCLK/8
pci_write(0xb010, 0x001c);

# Sd IO delay
pci_write(0xb08c, 0x00ff);
pci_write(0xb08e, 0x0100);

# NORclk div = WCLK/4 = (1+1)*2
pci_write(0x9c04, 0x0001);

# /* Host bus controller registers */
pci_write(0x0200, 0x0000);
pci_write(0x0202, 0xffff);
pci_write(0x020e, 0x0007);
pci_write(0x0210, 0x0002); # Host_IO_Drv="01"
pci_write(0x0214, 0x0c00);

// Set Host clock to PLL2 temporary, and set it to PLL1_OUT2 latter
pci_write(0x0010, 0x5000); // BCLK PLL2_OUT1 (Host 33MHz)

##############################################
###              PLL Setting               ###
##############################################
# /* PLL1 ck1_n1=160MHz, ck1_n2=200MHz */
pci_write(0x00a0, 0x400c);
pci_write(0x00a2, 0x0405);
pci_write(0x00a4, 0x2320);
pci_write(0x00a4, 0x3320);
pci_write(0x00a4, 0x2320);

// Set the host clock to PLL1_OUT1
pci_write(0x0010, 0x4001); // BCLK PLL1_OUT1 / 2 (Host 80MHz)

wait(2);

# /* PLL2 ck2_n1=152MHz, ck2_n2=210MHz */
pci_write(0x00b0, 0x400c);
pci_write(0x00b2, 0x0405);
pci_write(0x00b4, 0x235c);
pci_write(0x00b4, 0x335c);
pci_write(0x00b4, 0x235c);


# /* PLL2 ck2_n1=176MHz, ck2_n2=220MHz */
#pci_write(0x00b0, 0x9001);
#pci_write(0x00b2, 0x0405);
#pci_write(0x00b6, 0x2155);
#pci_write(0x00b4, 0x2348);
#pci_write(0x00b4, 0x3348);
#pci_write(0x00b4, 0x2348);

## spread modulation 0.5%, modulation freq. 30KHz
#pci_write(0x00b8, 0x0003);
#pci_write(0x00ba, 0xA31f);

# spread modulation 0.2%, modulation freq. 30KHz
#pci_write(0x00b8, 0x0001);
#pci_write(0x00ba, 0xA2A6);

// /* Memory controller registers */

pci_write(0x0300, 0x32a8);
pci_write(0x0302, 0x0000);
//pci_write(0x0308, 0x0100);
pci_write(0x030a, 0x0025);//enable auto precharge,Turbo mode,Risc R/W merge//
pci_write(0x030c, 0x0020);//enable gating request
pci_write(0x0310, 0x1822);
pci_write(0x0312, 0x4412);//B0DTWR,B0DTWTR,B0DTXP,B0DTRTW,B0DTRFC,B0DTRCD, B0DTRP
pci_write(0x0314, 0x0018);
pci_write(0x0316, 0x1000);//B0DTDQSMCLK, B0DTDQL
pci_write(0x0318, 0x2208);
pci_write(0x031a, 0x2000);//B0DTWL,B0DTEnCKGat,B0DTRAS
pci_write(0x031c, 0x2121);

#pci_write(0x0320, 0x8000);//DDLL ENABLE

pci_write(0x0330, 0x4421); //IO Driving
pci_write(0x0332, 0x1800); //IO Driving
pci_write(0x0334, 0x0303); //MCLKP Out Setting & MA &CMD
pci_write(0x0336, 0xcc00); //ODT Enable & MDQS IO Driving

pci_write(0x0340, 0x2a44); //PLL MX2CLK UPDATE
pci_write(0x0340, 0x3a44); //PLL MX2CLK UPDATE
pci_write(0x0340, 0x2a54); //PLL MX2CLK UPDATE

pci_write(0x0014, 0xD800);

##############################################
# /* FRange Selection for 440MHz */
##############################################

WRITE(0x16b2, 0x0000);    //clear reg[0x16b2]

WRITE(0x0342, 0x2e8c);    //set FRange=c
WAIT(7500);

if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0001, 0x0001);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0002, 0x0002);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0004, 0x0004);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0008, 0x0008);
}

WRITE(0x0342, 0x0e8d);    //dll reset
WRITE(0x0342, 0x2e8d);    //set FRange=d

WAIT(7500);

if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0010, 0x0010);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0020, 0x0020);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0040, 0x0040);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0080, 0x0080);
}
WRITE(0x0342, 0x0e8e);
WRITE(0x0342, 0x2e8e);    //set FRange=e

WAIT(7500);

if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0100, 0x0100);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0200, 0x0200);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0400, 0x0400);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x0800, 0x0800);
}
WRITE(0x0342, 0x0e8f);
WRITE(0x0342, 0x2e8f);    //set FRange=f
WAIT(7500);

if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x1000, 0x1000);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x2000, 0x2000);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x4000, 0x4000);
}
if ( READ_MASK(0x0346, 0x000F)==0x0001 )
{
     MASK(0x16b2, 0x8000, 0x8000);
}

if ( READ_MASK(0x16b2, 0xF0FF)==0xF0FF )
{
     WRITE( 0x0342, 0x0e8d);
     WRITE( 0x0342, 0x2e8d); //FRange=d
}
else
{
	if ( READ_MASK(0x16b2, 0xF000)==0xF000 )
	{
	   WRITE( 0x0342, 0x0e8f);
     WRITE( 0x0342, 0x2e8f); //FRange=f
  }
  else
  {
  	if ( READ_MASK(0x16b2, 0x0F00)==0x0F00 )
  	{
  	  WRITE( 0x0342, 0x0e8e);
  		WRITE( 0x0342, 0x2e8e); //FRange=e
  	}
  	else
  	{
  		if ( READ_MASK(0x16b2, 0x00F0)==0x00F0 )
  		{
  		  WRITE( 0x0342, 0x0e8d);
  			WRITE( 0x0342, 0x2e8d); //FRange=d
  		}
  		else
  		{
  			if ( READ_MASK(0x16b2, 0x0000F)==0x000F )
  			{
  			  WRITE( 0x0342, 0x0e8c);
  				WRITE( 0x0342, 0x2e8c); //FRange=c
  			}
  			else
  			{
  			  WRITE( 0x0342, 0x0e8f);
  				WRITE( 0x0342, 0x2e8f);  //default
  			}
  		}
  	}
  }
}

//pci_write(0x0342, 0x2d8f); //DLL SETTING
pci_write(0x0344, 0x1444);
pci_write(0x0348, 0x00b2); //B0DTDQSI

pci_write(0x0396, 0xc000); //MAX GNT
pci_write(0x03da, 0x3508); //AHB
pci_write(0x03de, 0x000f); //AHB time out

//PIN MUX

pci_write(0x0350, 0x0003); //            rasn->casn
pci_write(0x0352, 0x0402); //casn->wen  ,wen->rasn
pci_write(0x0354, 0x160a); //mba0->modt ,mba1->ma5
pci_write(0x0356, 0x0010); //            modt->ma11
pci_write(0x0358, 0x1114); //ma0->ma12,  ma1->mba1
pci_write(0x035a, 0x0d0f); //ma2->ma8 ,  ma3->ma10
pci_write(0x035c, 0x0e08); //ma4->ma9,   ma5->ma3
pci_write(0x035e, 0x0005); //            ma7->ma0
pci_write(0x0360, 0x0c07); //ma8->ma7,   ma9->ma2
pci_write(0x0362, 0x1309); //ma10->mba0,  ma11->ma4
pci_write(0x0364, 0x0600); //ma12->ma1




# /* enable absorber */
pci_write( 0x0338, 0x0000);
pci_write( 0x033A, 0x0608);
pci_write( 0x0338, 0x0080);

pci_write( 0x0338, 0x0001);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x0081);

pci_write( 0x0338, 0x0002);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x0082);

pci_write( 0x0338, 0x0003);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x0083);

pci_write( 0x0338, 0x0004);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x0084);

pci_write( 0x0338, 0x0005);
pci_write( 0x033A, 0x0608);
pci_write( 0x0338, 0x0085);

pci_write( 0x0338, 0x0006);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x0086);

pci_write( 0x0338, 0x0007);
pci_write( 0x033A, 0x0608);
pci_write( 0x0338, 0x0087);

pci_write( 0x0338, 0x0008);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x0088);

pci_write( 0x0338, 0x0009);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x0089);

pci_write( 0x0338, 0x000A);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x008A);

pci_write( 0x0338, 0x000B);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x008B);

pci_write( 0x0338, 0x000C);
pci_write( 0x033A, 0x0406);
pci_write( 0x0338, 0x008C);

pci_write( 0x0338, 0x000D);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x008D);

pci_write( 0x0338, 0x000E);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x008E);

pci_write( 0x0338, 0x000F);
pci_write( 0x033A, 0x0606);
pci_write( 0x0338, 0x008F);

pci_write( 0x0338, 0x8000);

wait(200000);
##############################################
# /* MCLK_PHY Phase selection for 440MHz */
##############################################

WRITE(0x3a6, 0xffff);
 
if(READ_MASK(0x034a, 0x000F)==0x0000)
{
    WRITE(0x0340, 0x2a44); 
    WRITE(0x3a6, 0x0000);
}

if(READ_MASK(0x034a, 0x000F)==0x0008)
{
    WRITE(0x0340, 0x2a44); 
    WRITE(0x3a6, 0x0008); 
}

if(READ_MASK(0x034a, 0x000F)==0x0001)
{
    WRITE(0x0340, 0x2a44); 
    WRITE(0x3a6, 0x0001);        
}


//======================================

wait(1000);

// Extend mode register 2: 1X refresh rate
pci_write( 0x0304, 0x8000);
pci_write( 0x0308, 0x0800);
wait(1000);
pci_write( 0x0308, 0x8800);
pci_write( 0x0316, 0x1371);
wait(1000);

// Extend mode register 3:
pci_write( 0x0304, 0xc000);
pci_write( 0x0308, 0x0800);
wait(1000);
pci_write( 0x0308, 0x8800);
wait(1000);

// Extend mode register: DLL enable
pci_write( 0x0304, 0x4000);
pci_write( 0x0308, 0x0800);
wait(1000);
pci_write( 0x0308, 0x8800);
wait(1000);

// mode register: burst length=4, CAS latency=6 , DLL reset
pci_write( 0x0304, 0x0162);
pci_write( 0x0308, 0x0800);
wait(1000);
pci_write( 0x0308, 0x8800);
wait(1000);

// mode register: burst length=4, CAS latency=6, DLL reset Off
pci_write( 0x0304, 0x0862);
pci_write( 0x0308, 0x0800);
wait(1000);
pci_write( 0x0308, 0xc800);
wait(1000);

// Extend mode register: OCD default
pci_write( 0x0304, 0x43C4);
pci_write( 0x0308, 0x0800);
wait(1000);
pci_write( 0x0308, 0x8800);
wait(1000);

// Extend mode register: OCD exit
pci_write( 0x0304, 0x4006);  // ODT
pci_write( 0x0308, 0x0800);
wait(1000);
pci_write( 0x0308, 0xC800); // turn off PD
wait(1000);

//Enable WATCHDOG wait 1s  80000000 * N(s)
pci_write( 0xa80c, 0x0000);
pci_write( 0xa804, 0xb400);
pci_write( 0xa806, 0x04c4);
pci_write( 0xa808, 0x5ab9);
pci_write( 0xa80a, 0x0000);
pci_write( 0xa80c, 0x0003);

pci_write( 0x03aa, 0x1fff);

//CODA_W > CODA_R > AHB_RW > ISP_R > ISP_W > RISC2 > RISC1 > VIDEO_R > VIDEO_W > MEM_BIST
//pci_write( 0x037e, 0x0b0a);
//pci_write( 0x0380, 0x0f0e);
//pci_write( 0x0382, 0x0c10);
//pci_write( 0x0384, 0x080d);
//pci_write( 0x0386, 0x1109);

//CODA_W > CODA_R > RISC2 > RISC1 > AHB_RW > ISP_R > ISP_W > VIDEO_R > VIDEO_W > MEM_BIST
pci_write( 0x037e, 0x0b0a);
pci_write( 0x0380, 0x0d0c);
pci_write( 0x0382, 0x0f0e);
pci_write( 0x0384, 0x0810);
pci_write( 0x0386, 0x1109);

pci_write( 0x03da, 0x2488);
pci_write( 0x03de, 0x0008);

pci_write( 0x034e, 0xa000);

wait(100);

//Capture warm up
pci_write( 0x2000, 0x0004);
pci_write( 0x2002, 0x0780);
pci_write( 0x2004, 0x0438);
pci_write( 0x1f00, 0x8700);
pci_write( 0x207a, 0x4000);
pci_write( 0x207c, 0x7800);
pci_write( 0x207e, 0x4000);
pci_write( 0x2092, 0x0010);
pci_write( 0x2094, 0x0000); #  YBuf0[15: 0]
pci_write( 0x2096, 0x01E0); #  YBuf0[31:16]
pci_write( 0x2098, 0x0000); # UVBuf0[15: 0]
pci_write( 0x209a, 0x01E0); # UVBuf0[31:16]
pci_write( 0x20bc, 0x0001); #  Y pitch
pci_write( 0x20be, 0x0001); # UV pitch
pci_write( 0x20c0, 0x8001);
pci_write( 0x20c2, 0x0002);
pci_write( 0x20c4, 0x0023);
pci_write( 0x20c6, 0x0438);
pci_write( 0x20c8, 0x000a);
pci_write( 0x20ca, 0x0060);
pci_write( 0x20cc, 0x0030);
pci_write( 0x20ce, 0x0780);
pci_write( 0x20d0, 0x0058);
pci_write( 0x20f6, 0x2400);
pci_write( 0x2018, 0x8000); //fire

//ISP warm up
pci_write( 0x0504, 0x8262);
pci_write( 0x0506, 0x0000);
pci_write( 0x0508, 0x0800);
pci_write( 0x050a, 0x0840);
pci_write( 0x0510, 0x0000);
pci_write( 0x0512, 0x0000);
pci_write( 0x0514, 0xa400);
pci_write( 0x0516, 0x001f);
pci_write( 0x0538, 0x7600);
pci_write( 0x053a, 0x002f);
pci_write( 0x053c, 0x0780);
pci_write( 0x053e, 0x0780);
pci_write( 0x0540, 0x0438);
pci_write( 0x0542, 0x0780);
pci_write( 0x0544, 0x4000);
pci_write( 0x0548, 0x4000);
pci_write( 0x054e, 0x00ee);
pci_write( 0x0550, 0x0022);
pci_write( 0x0552, 0x1e00);
pci_write( 0x0554, 0x0430);
pci_write( 0x0556, 0x0010);
pci_write( 0x0558, 0x0080);

pci_write( 0x0572, 0x0000);
pci_write( 0x0574, 0x01E0);
pci_write( 0x0576, 0x0000);
pci_write( 0x0578, 0x01E0);
pci_write( 0x057a, 0x0000);
pci_write( 0x057c, 0x01E0);

pci_write( 0x05ae, 0x0780);
pci_write( 0x05b0, 0x0438);
pci_write( 0x05b2, 0x0001);
pci_write( 0x05b4, 0x0001);

pci_write( 0x060a, 0x0001);
pci_write( 0x0502, 0x0301);
//pci_write( 0x0500, 0x0019);

wait(1000);

##############################################
# /* Bist test to select case for 440MHz */
##############################################
WRITE(0x3b0, 0x0000);
WRITE(0x3a6, 0x0000);
WRITE(0x3aa, 0x00ff);



WRITE(0x344, 0x1444);

WRITE(0x3a8, 0x0000);
WRITE(0x3a8, 0x0300);
wait(1000000); //5ms
if(READ_MASK(0x03a8, 0xF000)==0x3000)
{
    WRITE(0x03b0, 0x0010);         
}
WRITE(0x3a8, 0x0000);
WRITE(0x3a8, 0x0b10);
wait(1000000);
if(READ_MASK(0x03a8, 0xF000)==0x3000)
{
    WRITE(0x03b0, 0x0020);         
}
WRITE(0x3a8, 0x0000);
WRITE(0x3a8, 0x0500);
wait(1000000);
if(READ_MASK(0x03a8, 0xF000)==0x3000)
{
    WRITE(0x03b0, 0x0040);         
}
WRITE(0x3a8, 0x0000);
WRITE(0x3a8, 0x0310);
wait(1000000);
   
if(READ_MASK(0x03a8, 0xF000)==0x3000)
{
    WRITE(0x03b0, 0x0080);         
}


if(READ_MASK(0x03b0, 0x00F0)!=0x0000)
{
   WRITE(0x344, 0x1111);
   WRITE(0x348, 0x00a2);
}
else{

  WRITE(0x344, 0x1444);
}